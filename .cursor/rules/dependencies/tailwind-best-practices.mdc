---
description: Styling TSX and JSX components using TailwindCSS v4
globs: ["apps/web/**", "**/*.tsx", "**/*.jsx", "**/globals.css"]
alwaysApply: false
contextPriority: medium
relatedRules: ["dependencies/next/server-first", "general-styling"]
keywords: ["tailwind-v4", "design-tokens", "css-variables", "styling"]
lastUpdated: "2025-01-03"
---

Quick TailwindCSS v4 realities this enforces:

* Tailwind v4 imports via `@import "tailwindcss";` (not `@tailwind base|components|utilities`) and customizes `container` with `@utility`, which you’re already doing. ([tailwindcss.com][1])
* Default **border color is now `currentColor`**, so your “preserve v3 behavior” base layer is correct. ([tailwindcss.com][1])
* **Variables in arbitrary values** use **parentheses** now (`bg-(--brand-color)`), not square brackets. ([tailwindcss.com][1])
* Use **`@theme`** for theme variables; avoid raw Tailwind palettes unless you’ve aliased them to your tokens. ([tailwindcss.com][2])
* All custom classes below are for illustrative purposes only.

---

# Master Rule (v4-aware)

> **Master Rule**
> All **visuals** (color, typography, radii, shadows, borders, spacing, opacity, motion) must come from **design tokens in `index.css`**. Tailwind is for **structure** (flex/grid/flow/position/overflow/visibility/scroll, responsive variants) **plus** our **token-backed alias utilities** (e.g., `.bg-wf-green`, `.text-wf-fg`, `.border-wf-border`, `.heading-2`).
> **Forbidden:** default Tailwind color/size/radius/shadow classes (e.g., `text-blue-500`, `bg-gray-100`, `rounded-lg`, `shadow-md`, `text-2xl`, `p-6`) **unless** they map 1:1 to your tokens via an explicit alias.
> **Dark mode** derives from your custom variant (`@custom-variant dark (&:is(.dark *));`) and token overrides. No ad-hoc `dark:text-gray-200`. ([tailwindcss.com][1])

Why: consistency, contrast guarantees, one source of truth, painless theming.

---

# Sectioned Documents (tight, token-first)

## A. Visual Design

1. **Hierarchy & Layout**
   Use Tailwind for structure: `flex`, `grid`, `gap-*`, `items-*`, `justify-*`, `w-*`, `h-*`, responsive (`md:`, `lg:`). Visual spacing should come from **tokenized utilities** you already expose (or new ones you add with `@utility`).
   **Container** stays customized in CSS (`@utility container { … }`). ([tailwindcss.com][1])

2. **Color Palette**
   Use **semantic tokens** you’ve defined (`--wf-*` → `--background`, `--foreground`, `--primary`, etc.) and your semantic classes (`.bg-wf-card`, `.text-wf-fg`, `.border-wf-border`). No raw Tailwind palettes. If you must reference a CSS var in a utility, use v4 syntax: `bg-(--wf-green)` (parentheses). ([tailwindcss.com][1])

3. **Typography**
   Only use your text utilities (`.heading-1…4`, `.text-body`, etc.) or create new ones with `@utility`. Do **not** reach for `text-2xl`/`leading-7` directly; map those to tokens first. ([Stack Overflow][3])

4. **Contrast & Legibility**
   AA minimum. Tokenize state pairs (`--primary`/`--primary-foreground`, `--destructive`/`--destructive-foreground`) in **HSL** as you already do; ensure hover/active/focus variants preserve contrast.

5. **Consistency**
   All components pull colors/radii/shadows from tokens (`--wf-*`, `--radius-*`, `--ring`). No one-offs—if a special color appears, it becomes a token first.

---

## B. Interaction Design

* **Nav & components:** structure with utilities, visuals via tokens (e.g., active item color = `--primary`, divider = `--wf-border`).
* **States:** define tokenized states (`--btn-bg`, `--btn-bg-hover`, `--ring`) and apply via classes; don’t sprinkle `hover:bg-blue-500`.
* **Responsive:** `md:flex` good; `md:text-2xl` **not** unless aliased to a token.

---

## C. Accessibility

* **Focus**: visible focus rings via your tokenized ring (`--wf-ring`) and class (e.g., `.focus\:ring-wf`). Keep outlines; never remove without a strong alternative.
* **Semantic HTML**, **keyboard order**, **SR-friendly icons** (tokenized icon color).
* Test with axe/Lighthouse before merge.

---

## D. Performance

* SVG/AVIF/WebP, lazy-load, code split.
* **Purge keeps alias surface small**; prefer token utilities and component classes to avoid class soup.
* Watch Core Web Vitals and block regressions.

---

## E. Feedback

* **Loading, error, success** use semantic tokens (`--wf-yellow`, `--wf-red`, `--wf-green`) via your classes `.bg-wf-yellow`, `.bg-wf-red`, `.bg-wf-green`.
* Error copy: “what happened + how to fix,” styled by tokens.

---

## F. IA & Content

* Stable labels; empty/search states styled with tokens; flows documented.

---

## G. Mobile-First & Touch

* Start mobile; scale up with structural utilities.
* Tap targets sized with tokenized spacing utilities (create with `@utility` if you want `.px-space-4` etc.).

---

## H. Consistency, Testing & Docs

* Component library showcases **only token-backed** classes.
* Naming stays consistent: `--wf-*` for brand primitives, `--color-*`/`--radius-*` (via `@theme`) for Tailwind-visible variables, semantic classes `.bg-wf-*`, `.text-wf-*`, `.heading-*`. ([tailwindcss.com][2])
* Visual regression tests anchor on **tokens**, not literal hex.

---

# AI/CI Guardrails (so defaults can’t sneak in)

**Ban default Tailwind “visual” utilities unless aliased:**

* Colors: `/(^|\s)(text|bg|border|ring|divide)-(black|white|slate|gray|zinc|neutral|stone|red|orange|amber|yellow|lime|green|emerald|teal|cyan|sky|blue|indigo|violet|purple|fuchsia|pink|rose)-\d{2,3}(\s|$)/`
* Shadows/radius: `/(^|\s)(shadow-(?!elev-\d)|rounded-(?!radius-(?:sm|md|lg|xl)|wf-[a-z0-9-]+))(\s|$)/`
* Arbitrary values must be **tokenized** (v4 syntax): **allow** `/\(-{2}[a-z0-9-]+\)/`, **deny** `\[(?!var\().*]` (old v3 style) and any `#hex`/`rgb()/hsl()` literals in markup. ([tailwindcss.com][1])

**ESLint (JSX):** block inline styles unless `var(--*)` used.
**Stylelint:** disallow literal colors/numbers when a token exists (custom rule or regex).

**Human policy examples**

* ✅ `class="flex items-center gap-3 text-wf-fg bg-wf-card border-wf-border radius-lg elev-1"`
* ✅ `class="grid md:grid-cols-2 gap-(--space-3)"` *(if you add `--space-3`)*
* ❌ `class="text-blue-500 bg-gray-100 rounded-lg shadow-md p-6"`

---

# Index.css notes (your file, kept and tightened)

* **Keep**: `@import "tailwindcss";`, `@plugin 'tailwindcss-animate';`, `@custom-variant dark (&:is(.dark *));`, `@utility container { … }`, and the **v3 border-color shim**; these align with v4 guidance. ([tailwindcss.com][1])
* **Theme/tokens**: your `:root` remaps `--wf-*` → semantic (`--background`, `--primary`, etc.), then **`@theme` exposes Tailwind-visible `--color-*`** which your utilities consume—great pattern. ([tailwindcss.com][2])
* **Typography**: keep `.heading-*`/`.text-body*` as the sole way to size/weight text. If you need responsive sizes, register utilities via `@utility` (v4 requires it before `@apply`). ([Stack Overflow][3])
* **Arbitrary variable syntax**: when you truly need an inline variable value in a Tailwind class, prefer `bg-(--wf-green)` over the old `bg-[--wf-green]`. ([tailwindcss.com][1])

---

# Tailwind v4 citations for future devs

* **Upgrade guide** (import, container via `@utility`, border/ring defaults, new var syntax): ([tailwindcss.com][1])
* **Theme variables via `@theme`** (how utilities are generated from your CSS vars): ([tailwindcss.com][2])
* **Custom utilities via `@utility`** (register before `@apply`): ([Stack Overflow][3])
* **Dark variant + custom variants** (pattern you’re using is valid; docs also show custom hover via `@custom-variant`): ([tailwindcss.com][1])

---

[1]: https://tailwindcss.com/docs/upgrade-guide "Upgrade guide - Getting started - Tailwind CSS"
[2]: https://tailwindcss.com/docs/theme?utm_source=chatgpt.com "Theme variables - Core concepts - Tailwind CSS"
[3]: https://stackoverflow.com/questions/79494845/tailwind-4-custom-utilities-and-component-style-error?utm_source=chatgpt.com "Tailwind 4 custom utilities and component style error"
