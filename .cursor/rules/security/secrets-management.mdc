---
description: When handling environment variables
globs: []
alwaysApply: false
contextPriority: medium
relatedRules: ["dependencies/next/server-first", "api-general-guidelines"]
keywords: ["envx", "mcp", "secrets", "environment-variables", "encryption"]
lastUpdated: "2025-01-03"
---
# EnvManager-MCP: Encrypted Environment Variable Management

## Overview
EnvManager-MCP is a secure, encrypted environment variable management system that provides multi-environment support through an MCP server interface. It stores encrypted environment variables in a project-scoped vault and integrates with dotenvx for runtime injection.

## Architecture

### Core Components
- **MCP Server**: Exposes 8 tools via stdio transport using @modelcontextprotocol/sdk
- **Encryption Layer**: AES-256-GCM encryption with project-scoped key derivation
- **Vault Storage**: Encrypted files stored in `~/.envvault/{projectId}/`
- **Environment Management**: Multi-environment support (local, dev, staging, uat, prod)
- **Security Guards**: Prevents unsafe .env files in repository root

### Project Identification
- **Project ID**: SHA-256 hash of resolved repository path
- **Vault Location**: `~/.envvault/{projectId}/`
- **Environment Files**: `~/.envvault/{projectId}/envs/{env}.env.enc`
- **Active Environment**: `~/.envvault/{projectId}/active.txt`

### Encryption Details
- **Algorithm**: AES-256-GCM (authenticated encryption)
- **Key Derivation**: scrypt with project-scoped salt (first 16 bytes of project ID)
- **Per-Write Salt**: 16 random bytes for AEAD context separation
- **File Format**: [salt(16)][iv(12)][tag(16)][ciphertext]
- **File Permissions**: 0o600 (owner read/write only)

## MCP Tools

### envx.init
- **Purpose**: Initialize vault and set active environment
- **Inputs**: `password` (required), `env` (optional), `envs` (optional array)
- **Actions**: 
  - Derives project key from password + project ID
  - Creates vault directories
  - Sets active environment
  - Creates empty encrypted env file
  - Writes `.envxrc.json` with project metadata
- **Output**: Confirmation text + JSON with `{projectId, envs, active}`

### envx.use
- **Purpose**: Switch active environment
- **Inputs**: `env` (required)
- **Actions**:
  - Updates active environment file
  - Updates `.envxrc.json` active field
- **Output**: Confirmation text + updated `.envxrc.json`

### envx.set
- **Purpose**: Set one or more environment variables
- **Inputs**: `password` (required), `data` (Record<string,string>)
- **Actions**:
  - Derives project key
  - Reads current encrypted env file
  - Merges new data
  - Writes encrypted file
  - Updates `.env.example` with all keys
- **Output**: Confirmation text + JSON with `{env, keys}`

### envx.get
- **Purpose**: Retrieve a single environment variable
- **Inputs**: `password` (required), `key` (required), `mask` (optional boolean)
- **Actions**:
  - Derives project key
  - Reads and decrypts env file
  - Returns value (optionally masked: `****value`)
- **Output**: Value text + JSON with `{env, key, value}`

### envx.list
- **Purpose**: List all environment variables
- **Inputs**: `password` (required), `values` (optional boolean)
- **Actions**:
  - Derives project key
  - Reads and decrypts env file
  - Returns sorted keys or key=value pairs
- **Output**: Newline-delimited list + JSON with `{env, count, entries}`

### envx.unset
- **Purpose**: Remove an environment variable
- **Inputs**: `password` (required), `key` (required)
- **Actions**:
  - Derives project key
  - Reads encrypted env file
  - Deletes specified key
  - Writes updated encrypted file
- **Output**: Confirmation text + JSON with `{env, removed}`

### envx.rotateKeys
- **Purpose**: Generate new RSA-4096 keypair for JWT operations
- **Inputs**: `password` (required)
- **Actions**:
  - Generates RSA-4096 keypair
  - Stores keys in `~/.envvault/{projectId}/jwt/{kid}/`
  - Updates env vars: `JWT_KID`, `JWT_PUBLIC_KEY_PATH`, `JWT_PRIVATE_KEY_PATH`
  - Writes encrypted env file
- **Output**: Confirmation text + JSON with `{env, kid}`

### envx.schema.generate
- **Purpose**: Generate TypeScript definitions from env.schema.ts
- **Inputs**: None
- **Actions**:
  - Reads `env.schema.ts` from repo root
  - Generates `env.d.ts` with ProcessEnv interface
  - Generates `env.validate.mjs` with validation function
- **Output**: Confirmation text

## Security Features

### Repository Safety
- **Root Env Check**: Prevents `.env`, `.env.local`, `.env.development`, `.env.production` in repo root
- **Error on Detection**: Throws error if unsafe files found

### Encryption Security
- **Project Scoping**: Keys derived from repository path hash
- **Per-Write Salts**: Each encryption uses unique salt for context separation
- **Authenticated Encryption**: GCM mode prevents tampering
- **Secure File Permissions**: 0o600 on all vault files

### Key Management
- **Password-Based**: User provides password, system derives keys
- **No Key Storage**: Master keys never stored, only derived
- **RSA Key Rotation**: Separate RSA-4096 keys for JWT operations

## File Structure
```
~/.envvault/{projectId}/
├── envs/
│   ├── local.env.enc
│   ├── dev.env.enc
│   └── ...
├── jwt/
│   └── {kid}/
│       ├── public.pem
│       ├── private.pem
│       └── created_at
└── active.txt

{repoRoot}/
├── .envxrc.json          # Project metadata
├── .env.example          # Auto-generated key list
├── env.schema.ts         # TypeScript schema (optional)
├── env.d.ts              # Generated types
└── env.validate.mjs      # Generated validator
```

## Integration
- **dotenvx**: Runtime environment injection via `envx run -- <command>`
- **TypeScript**: Generated type definitions for compile-time safety
- **MCP Clients**: Standard MCP protocol over stdio transport
- **Environment Variables**: `ENVX_REPO_ROOT` for custom repo path

## Error Handling
- **MCP Errors**: Proper error codes and messages via McpError
- **File System**: Graceful handling of missing files/directories
- **Encryption**: Clear error messages for decryption failures
- **Validation**: Input validation with JSON schema
```
