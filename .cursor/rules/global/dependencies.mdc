---
description: When in need of code generation, setup or configuration steps, or library/API documentation
alwaysApply: false
---

# Rule: Maintain and Auto-Refresh `context7.json`

## Purpose

Keep project dependency context fresh and automatically hydrate Context7 libraries when the local snapshot is stale.

## Scope

Applies to the current working directory and all detected project roots within it.

---

## Decision Logic

1. **Check for `context7.json` in the project root (cwd).**

   * If the file **exists**:

     * Read `meta."date updated"`.
     * Compute days since that date. If **> 30 days** (i.e., “more than a month ahead”):

       * Use **Context7 MCP** tools to:

         * Resolve all `library ids` defined in `context7.json`.
         * Fetch library docs proactively **without explicit user request**.
       * Update `meta."date updated"` to today’s date after successful refresh.
   * If the file **does not exist**:

     * Discover project roots under the working directory.

       * A directory qualifies as a project root if it contains at least one of:

         * `package.json`, `pnpm-lock.yaml`, `yarn.lock`, `package-lock.json`
         * `.csproj`, `.sln`, `packages.config`
         * `pyproject.toml`, `poetry.lock`, `requirements.txt`
         * `Cargo.toml`, `go.mod`, `Gemfile`, etc.
     * For each project root, detect dependencies using the appropriate command(s):

       * **Node.js/PNPM**: `pnpm list --depth=0 --json` (fallbacks: `npm ls --depth=0 --json`, `yarn list --depth=0 --json`)
       * **.NET**: `dotnet list <PROJECT_OR_SOLUTION> package --include-transitive`
       * **Python**: `pip list --format=json` or parse `pyproject.toml`/`poetry.lock`
       * **Rust**: `cargo metadata --no-deps --format-version=1`
       * **Go**: `go list -m -json all`
       * **Ruby**: `bundle list` or parse `Gemfile.lock`
     * Normalize and de-duplicate results to **top-level** declared dependencies where applicable.
     * Create a new `context7.json` using the schema below.

---

## Required Outputs

### 1) `context7.json` file (created or updated)

* **Schema (exact key spellings preserved as specified):**

```json
{
  "dependancies": {
    "[project root path]": {
      "[package name]": {
        "version": "[package version (fixed)]",
        "description": "[short descriptor]",
        "pm": "[package manager/registry]"
      }
      /* , ... more packages */
    }
    /* , ... more project roots */
  },
  "meta": {
    "date updated": "[YYYY-MM-DD]",
    "number of dependancies": "[total dependancies across projects]"
  }
}
```

* **Field rules**

  * `version`: a fixed/locked version string (no ranges like `^`, `~`, `>=`).
  * `description`: concise summary (prefer package’s own summary; otherwise derive from README/registry metadata).
  * `pm`: one of `pnpm`, `npm`, `yarn`, `.net/nuget`, `pip/pypi`, `poetry/pypi`, `cargo/crates.io`, `go/modules`, `bundler/rubygems`, etc.
  * `meta."date updated"`: today in `YYYY-MM-DD`.
  * `meta."number of dependancies"`: total count across all projects (sum of all listed packages).

### 2) Context7 Library Refresh (only when stale)

* When `context7.json` exists **and** is older than 30 days:

  * Resolve library IDs from `context7.json` with Context7 MCP.
  * Fetch the latest docs/artifacts.
  * Do this automatically; no user prompt required.
  * After successful hydration, set `meta."date updated"` to today.

---

## Operational Notes

* **Staleness threshold**: strictly `> 30` days since `meta."date updated"`.
* **Safety**: default to read-only “dry-run” where available; only write `context7.json` after assembling a complete, validated map.
* **Descriptions**: prefer official registry metadata (e.g., npm registry summary, NuGet description). Fall back to short README extraction.
* **Cross-project duplicates**: list the package under each project root that declares it; versions may differ by project.
* **Idempotence**: re-running without changes must not alter file ordering or whitespace beyond deterministic formatting.
* **Failure handling**: if a dependency query fails in one project, proceed with others and include a minimal error note in a comment adjacent to that project’s section (or log separately if comments are disallowed).

---

## Acceptance Criteria

* If `context7.json` exists and is older than 30 days: Context7 libraries are resolved and docs fetched; `meta."date updated"` is updated.
* If `context7.json` is missing: all project roots are scanned, dependencies identified with versions fixed, and a valid `context7.json` is created.
* `meta."number of dependancies"` matches the total count of all listed packages across all project roots.
