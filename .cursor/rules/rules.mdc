---
description: Main project management rule that binds project-overview.md and TODO directory for task-driven development workflow
globs: ["**/.cursor/context/project-overview.md", "**/TODO/**/*.md"]
alwaysApply: true
---

# Project Management Workflow

This rule establishes a task-driven development workflow that binds the project overview document and TODO directory structure.

## Project Overview Integration
- **Source of Truth**: `.cursor/context/project-overview.md` serves as the high-level source of truth for project functionality
- **Task Breakdown**: Project functionality is broken down into individual markdown files in the TODO directory
- **Task Structure**: Each task file must contain the following headers:
  - **Objective**: The objective of this task
  - **Dependencies**: The steps that need to be taken to realize the objective
  - **Acceptance Criteria**: The criteria to measure the effectiveness of the implemented dependencies
  - **Direct Acyclic Graph (DAG)**: Earlier tasks (markdown files) that need to be implemented before this one can proceed

## TODO Directory Structure
The TODO directory contains four sub-directories representing the task lifecycle:

### 1. TBD (To Be Done)
- Contains tasks that have yet to be implemented
- Tasks are created here based on project overview requirements
- Tasks must have all required headers before moving to "Doing"

### 2. Doing
- Contains tasks that are currently being worked on
- Only ONE task should be in this directory at any given time
- Tasks are moved here from "TBD" when work begins

### 3. Done
- Contains tasks that have been fully implemented
- Tasks are moved here from "Doing" when implementation is complete
- All acceptance criteria must be met before moving

### 4. Reviewed
- Contains tasks that need code reviewing after being "Done"
- Tasks are moved here from "Done" for final review
- After review, tasks can be archived or marked as completed

## Git Workflow Requirements
- **Mandatory Commits**: Between each step (moving markdown files between directories), it is compulsory to commit to version control using Git
- **Commit Messages**: Use descriptive commit messages that indicate the task transition
- **Example Commit Messages**:
  - "Move task-001 from TBD to Doing - starting implementation"
  - "Move task-001 from Doing to Done - implementation complete"
  - "Move task-001 from Done to Reviewed - ready for review"

## Task Management Rules
1. **Single Active Task**: Only one task should be in the "Doing" directory at any given time
2. **DAG Compliance**: Tasks must respect their Direct Acyclic Graph dependencies
3. **Header Completeness**: All tasks must have complete headers before moving to "Doing"
4. **Acceptance Criteria**: Tasks can only move to "Done" when all acceptance criteria are met
5. **Git Integration**: Every directory transition must be committed to Git

## File Naming Convention
- Task files should be named descriptively: `task-{id}-{description}.md`
- Example: `task-001-user-authentication.md`, `task-002-database-setup.md`

## Integration with Development Process
- This workflow integrates with the existing codebase structure
- Tasks should reference specific files, components, or features being implemented
- The project overview should be updated as tasks are completed to reflect current project state
